//A2: 	Write a C Program to demonstrate indexing and associated operations.

#include <stdio.h> 
#define MAX 10                                          // Maximum size of the array 
int main() { 
int arr[MAX] = {10, 20, 30, 40, 50};          // Initial array 
int size = 5;                                                  // Initial size of the array 

// 1. Traversing the array (printing elements) 
printf("Original array:\n"); 
for (int i = 0; i < size; i++) { 
printf("%d ", arr[i]); 
} 
printf("\n"); 

// 2. Updating an element at a specific index 
int indexToUpdate = 2; 
printf("\nUpdating element at index %d from %d:\n", indexToUpdate, arr[indexToUpdate]); 
arr[indexToUpdate] = 99;                           // Update the element 
for (int i = 0; i < size; i++) { 
printf("%d ", arr[i]); 
} 
printf("\n"); 

// 3. Searching for an element in the array 
int searchValue = 40; 
int foundIndex = -1; 
for (int i = 0; i < size; i++) { 
if (arr[i] == searchValue) { 
foundIndex = i; 
break; 
} 
} 
if (foundIndex != -1) { 
printf("\nValue %d found at index %d\n", searchValue, foundIndex); 
} else { 
printf("\nValue %d not found in the array\n", searchValue); 
} 

// 4. Inserting an element at a specific index 
int indexToInsert = 2; 
int valueToInsert = 25; 
if (size >= MAX) {
printf("\nInsertion failed, array is full.\n"); 
} else if (indexToInsert < 0 || indexToInsert > size) { 
printf("\nInsertion failed, invalid index.\n"); 
} else { 
// Shift elements to the right to make space for the new value 
for (int i = size; i > indexToInsert; i--) { 
arr[i] = arr[i - 1]; } 
arr[indexToInsert] = valueToInsert; 	// Insert the new value 
size++;					// Increase the size of the array 
printf("\nInserting %d at index %d:\n", valueToInsert, indexToInsert); 
for (int i = 0; i < size; i++) { 
printf("%d ", arr[i]); } 
printf("\n"); 
} 

// 5. Deleting an element at a specific index 
int indexToDelete = 3; 
if (indexToDelete < 0 || indexToDelete >= size) { 
printf("\nDeletion failed, invalid index.\n"); 
} else { 
// Shift elements to the left to overwrite the deleted value 
for (int i = indexToDelete; i < size - 1; i++) { 
arr[i] = arr[i + 1]; 
} 
size--; 					// Decrease the size of the array 
printf("\nDeleting element at index %d:\n", indexToDelete); 
for (int i = 0; i < size; i++) { 
printf("%d ", arr[i]); } 
printf("\n"); 
} 
return 0; 
}
